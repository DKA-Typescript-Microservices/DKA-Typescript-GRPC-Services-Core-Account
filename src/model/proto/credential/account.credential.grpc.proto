syntax = "proto3";

package account.credential;

service AccountCredential {
  rpc Create(IAccountCredential) returns (AccountCredentialCreateResponse);
  rpc Read(AccountCredentialReadRequest) returns (AccountCredentialReadResponse);

  rpc Auth(AccountCredentialAuthRequest) returns (AccountCredentialAuthResponse);
}

message IAccountCredentialParent {
  optional string id = 1;                  // Document ID (_id in MongoDB)
  optional string credential = 2;          // Preference ObjectId (as string)
  optional string info = 3;          // Preference ObjectId (as string)
}

// Defining the AccountCredential message based on the IAccountCredential model
message IAccountCredential {
  optional string id = 1;                  // Document ID (_id in MongoDB)
  optional string preference = 2;          // Preference ObjectId (as string)
  optional IAccountCredentialParent parent = 3;              // Parent ObjectId (as string)
  string email = 4;          // First name as string
  string username = 5;           // Last name as string
  optional string password = 6;
}

// The response message containing an AccountCredential
message AccountCredentialReadRequest {

}

message AccountCredentialAuthRequest {
  string username = 1;
  string password = 2;
}

message AccountCredentialAuthResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  IAccountCredential data = 4;
}


message AccountCredentialCreateResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  IAccountCredential data = 4;
}

message AccountCredentialReadResponse {
  bool status = 1;
  int64 code = 2;
  string msg = 3;
  repeated IAccountCredential data = 4;
}