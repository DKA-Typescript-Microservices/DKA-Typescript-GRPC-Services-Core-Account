// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: src/model/proto/info/account.info.gprc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "account.info";

export interface IAccountInfoParent {
  /** Document ID (_id in MongoDB) */
  id?:
    | string
    | undefined;
  /** Preference ObjectId (as string) */
  credential?:
    | string
    | undefined;
  /** Preference ObjectId (as string) */
  info?: string | undefined;
}

/** Defining the AccountInfo message based on the IAccountInfo model */
export interface IAccountInfo {
  /** Document ID (_id in MongoDB) */
  id?:
    | string
    | undefined;
  /** Preference ObjectId (as string) */
  preference?:
    | string
    | undefined;
  /** Parent ObjectId (as string) */
  parent?:
    | IAccountInfoParent
    | undefined;
  /** First name as string */
  firstName: string;
  /** Last name as string */
  lastName?: string | undefined;
}

/** The response message containing an AccountInfo */
export interface AccountInfoReadRequest {
}

export interface AccountInfoCreateResponse {
  status: boolean;
  code: number;
  msg: string;
  data: IAccountInfo | undefined;
}

export interface AccountInfoReadResponse {
  status: boolean;
  code: number;
  msg: string;
  data: IAccountInfo[];
}

function createBaseIAccountInfoParent(): IAccountInfoParent {
  return { id: undefined, credential: undefined, info: undefined };
}

export const IAccountInfoParent: MessageFns<IAccountInfoParent> = {
  encode(message: IAccountInfoParent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.credential !== undefined) {
      writer.uint32(18).string(message.credential);
    }
    if (message.info !== undefined) {
      writer.uint32(26).string(message.info);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IAccountInfoParent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIAccountInfoParent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.credential = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.info = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IAccountInfoParent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      credential: isSet(object.credential) ? globalThis.String(object.credential) : undefined,
      info: isSet(object.info) ? globalThis.String(object.info) : undefined,
    };
  },

  toJSON(message: IAccountInfoParent): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.credential !== undefined) {
      obj.credential = message.credential;
    }
    if (message.info !== undefined) {
      obj.info = message.info;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IAccountInfoParent>, I>>(base?: I): IAccountInfoParent {
    return IAccountInfoParent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IAccountInfoParent>, I>>(object: I): IAccountInfoParent {
    const message = createBaseIAccountInfoParent();
    message.id = object.id ?? undefined;
    message.credential = object.credential ?? undefined;
    message.info = object.info ?? undefined;
    return message;
  },
};

function createBaseIAccountInfo(): IAccountInfo {
  return { id: undefined, preference: undefined, parent: undefined, firstName: "", lastName: undefined };
}

export const IAccountInfo: MessageFns<IAccountInfo> = {
  encode(message: IAccountInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.preference !== undefined) {
      writer.uint32(18).string(message.preference);
    }
    if (message.parent !== undefined) {
      IAccountInfoParent.encode(message.parent, writer.uint32(26).fork()).join();
    }
    if (message.firstName !== "") {
      writer.uint32(34).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(42).string(message.lastName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IAccountInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIAccountInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.preference = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parent = IAccountInfoParent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IAccountInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      preference: isSet(object.preference) ? globalThis.String(object.preference) : undefined,
      parent: isSet(object.parent) ? IAccountInfoParent.fromJSON(object.parent) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
    };
  },

  toJSON(message: IAccountInfo): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.preference !== undefined) {
      obj.preference = message.preference;
    }
    if (message.parent !== undefined) {
      obj.parent = IAccountInfoParent.toJSON(message.parent);
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IAccountInfo>, I>>(base?: I): IAccountInfo {
    return IAccountInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IAccountInfo>, I>>(object: I): IAccountInfo {
    const message = createBaseIAccountInfo();
    message.id = object.id ?? undefined;
    message.preference = object.preference ?? undefined;
    message.parent = (object.parent !== undefined && object.parent !== null)
      ? IAccountInfoParent.fromPartial(object.parent)
      : undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? undefined;
    return message;
  },
};

function createBaseAccountInfoReadRequest(): AccountInfoReadRequest {
  return {};
}

export const AccountInfoReadRequest: MessageFns<AccountInfoReadRequest> = {
  encode(_: AccountInfoReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountInfoReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountInfoReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AccountInfoReadRequest {
    return {};
  },

  toJSON(_: AccountInfoReadRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountInfoReadRequest>, I>>(base?: I): AccountInfoReadRequest {
    return AccountInfoReadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountInfoReadRequest>, I>>(_: I): AccountInfoReadRequest {
    const message = createBaseAccountInfoReadRequest();
    return message;
  },
};

function createBaseAccountInfoCreateResponse(): AccountInfoCreateResponse {
  return { status: false, code: 0, msg: "", data: undefined };
}

export const AccountInfoCreateResponse: MessageFns<AccountInfoCreateResponse> = {
  encode(message: AccountInfoCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== false) {
      writer.uint32(8).bool(message.status);
    }
    if (message.code !== 0) {
      writer.uint32(16).int64(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.data !== undefined) {
      IAccountInfo.encode(message.data, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountInfoCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountInfoCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.code = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = IAccountInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountInfoCreateResponse {
    return {
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      data: isSet(object.data) ? IAccountInfo.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: AccountInfoCreateResponse): unknown {
    const obj: any = {};
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.data !== undefined) {
      obj.data = IAccountInfo.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountInfoCreateResponse>, I>>(base?: I): AccountInfoCreateResponse {
    return AccountInfoCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountInfoCreateResponse>, I>>(object: I): AccountInfoCreateResponse {
    const message = createBaseAccountInfoCreateResponse();
    message.status = object.status ?? false;
    message.code = object.code ?? 0;
    message.msg = object.msg ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? IAccountInfo.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseAccountInfoReadResponse(): AccountInfoReadResponse {
  return { status: false, code: 0, msg: "", data: [] };
}

export const AccountInfoReadResponse: MessageFns<AccountInfoReadResponse> = {
  encode(message: AccountInfoReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== false) {
      writer.uint32(8).bool(message.status);
    }
    if (message.code !== 0) {
      writer.uint32(16).int64(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    for (const v of message.data) {
      IAccountInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountInfoReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountInfoReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.code = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data.push(IAccountInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountInfoReadResponse {
    return {
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => IAccountInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccountInfoReadResponse): unknown {
    const obj: any = {};
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => IAccountInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountInfoReadResponse>, I>>(base?: I): AccountInfoReadResponse {
    return AccountInfoReadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountInfoReadResponse>, I>>(object: I): AccountInfoReadResponse {
    const message = createBaseAccountInfoReadResponse();
    message.status = object.status ?? false;
    message.code = object.code ?? 0;
    message.msg = object.msg ?? "";
    message.data = object.data?.map((e) => IAccountInfo.fromPartial(e)) || [];
    return message;
  },
};

export interface AccountInfo {
  Create(request: IAccountInfo): Promise<AccountInfoCreateResponse>;
  Read(request: AccountInfoReadRequest): Promise<AccountInfoReadResponse>;
}

export const AccountInfoServiceName = "account.info.AccountInfo";
export class AccountInfoClientImpl implements AccountInfo {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AccountInfoServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Read = this.Read.bind(this);
  }
  Create(request: IAccountInfo): Promise<AccountInfoCreateResponse> {
    const data = IAccountInfo.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => AccountInfoCreateResponse.decode(new BinaryReader(data)));
  }

  Read(request: AccountInfoReadRequest): Promise<AccountInfoReadResponse> {
    const data = AccountInfoReadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Read", data);
    return promise.then((data) => AccountInfoReadResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
